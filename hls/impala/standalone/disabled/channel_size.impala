fn @read(buf: &mut [i32], i: i32) -> i32 { bitcast[&[1][i32]](buf)(i)}
fn @write(buf: &mut [i32], i: i32, v: i32) -> () { bitcast[&mut[1][i32]](buf)(i) = v }

fn main() -> () {

    //let temp = channel_i32 {
    //    data: 0,
    //    size: 10
    //};

    //static mut ch : channel_i32;
    //static mut ch : channel_i32;
    static mut ch = channel_i32 {
        data: 0,
        size: 5 as f32
    };
    //type temp2 = temp;
    //static mut ch : channel_i32;
    //channel_i32 {
    //    data: 0,
    //    size: 10 as f32
    //};
    //let test = ch.size = 10 as f32;
    //ch.size = 5 as f32;
    //ch.data = 44;
    //print_f32(ch.size);
    //print_i32(ch.size as i32);
    //print_i32(ch.data);
    let device = 0;
    let ptr = alloc_hls(device, sizeof[i32]() * 4i64).data as &mut [i32];

    with hls(device) {
    //let test_dev = ch.size = 10 as f32;
    let test_dev = ch.size;
    //print_f32(test_dev);
        write_channel_i32(&mut ch, read(ptr, 0));
    }
    with hls(device) {
        write(ptr, 0, read_channel_i32(&mut ch));
    }

}
