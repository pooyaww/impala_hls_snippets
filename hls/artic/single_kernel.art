static mut ch : channel[i32];
fn @read(buf: &mut [i32], i: i32) -> i32 { bitcast[&addrspace(1)[i32]](buf)(i)}
fn @write(buf: &mut [i32], i: i32, v: i32) -> () { bitcast[&mut addrspace(1)[i32]](buf)(i) = v }

#[export]
fn main() -> () {
    let device = 0;
    //kernel1
    hls(device, || {
        fn single() -> () {
            let mut temp = 0;
            temp++;
        }
        single();
    });

    let ptr = alloc_hls(device, sizeof[i32]() * 4).data as &mut [i32];

    //kernel2
    hls(device,|| {
        write_channel[i32](&mut ch, read(ptr,0));
    });

    //kernel3
    hls(device, || {
        fn single() -> () {
            let mut temp = 0;
            temp++;
        }
        single();
    });

    //kernel4
    hls(device, || {
        write(ptr,0,read_channel[i32](&mut ch));
    });

}
