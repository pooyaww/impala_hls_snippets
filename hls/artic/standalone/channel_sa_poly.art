struct channel[T] {
    data: T
}

#[import(cc = "thorin")] fn hls(dev: i32, body: fn() -> ()) -> ();
#[import(cc = "device", name = "read_channel")] fn read_channel[T](&mut channel[T]) -> T;
#[import(cc = "device", name = "write_channel")] fn write_channel[T] (&mut channel[T], T) -> ();
#[import(cc = "C", name = "anydsl_alloc")] fn runtime_alloc(_device: i32, _size: i64) -> &mut [i8];
#[import(cc = "builtin")] fn bitcast[T, U](_src: U) -> T;
#[import(cc = "builtin")] fn sizeof[_]() -> i64;



struct Buffer {
    data : &mut [i8],
    size : i64,
    device : i32
}

fn @alloc(device: i32, size: i64) = Buffer {
    data = runtime_alloc(device, size),
    size = size,
    device = device
};

fn @runtime_device(platform: i32, device: i32) -> i32 { platform | (device << 4) }
fn @read[T](buf: &mut [T], i: i32) -> T { bitcast[&addrspace(1)[T]](buf)(i)}
fn @write[T](buf: &mut [T], i: i32, v: T) -> () { bitcast[&mut addrspace(1)[T]](buf)(i) = v }

static mut ch : channel[i32];

#[export]
fn main() -> () {
    let device = 0;
    let ptr = alloc(runtime_device(2, device), sizeof[i32]() * 4:i64).data as &mut [i32];

    hls(device, || {
        write_channel[i32](&mut ch, read(ptr, 0));
    });

    hls(device,|| {
        write(ptr, 0, read_channel[i32](&mut ch));
    });
}
