
static mut ch0 : channel_i32;
static mut ch1 : channel_i32;

fn @read(buf: &mut [i32], i: i32) -> i32 { bitcast[&addrspace(1)[i32]](buf)(i)}
fn @write(buf: &mut [i32], i: i32, v: i32) -> () { bitcast[&mut addrspace(1)[i32]](buf)(i) = v }

#[export]
fn main() -> () {
    let device = 0;
    let ptr = alloc_hls(device, sizeof[i32]() * 4).data as &mut [i32];

    hls(device, || {
        // read from global memory and write to ch0
        write_channel_i32(&mut ch0, read(ptr,0));
    });

    hls(device, || {
        // read from ch0 and write to ch1
        write_channel_i32(&mut ch1, read_channel_i32(&mut ch0));
    });

    hls(device, || {
        // read from ch1 and write to global memory
        write(ptr,0,read_channel_i32(&mut ch1));
    });
}
