static mut ch : channel_i32;
fn @read(buf: &mut [i32], i: i32) -> i32 { bitcast[&[1][i32]](buf)(i)}
fn @write(buf: &mut [i32], i: i32, v: i32) -> () { bitcast[&mut[1][i32]](buf)(i) = v }

fn main(a:i32) -> () {
    let device = 0;
    let ptr_single = alloc_hls(device, sizeof[i32]() * 4i64).data as &mut [i32];
//kernel1
    with hls(device) {
        fn single() -> () {
            let mut temp = 0;
            temp++;
            write(ptr_single,0,a);
        }
        single();
    }

    let ptr = alloc_hls(device, sizeof[i32]() * 4i64).data as &mut [i32];

//kernel2
    with hls(device) {
        write_channel_i32(&mut ch, read(ptr,0));
    }

//kernel3
    with hls(device) {
        fn single() -> () {
            let mut temp = 0;
            temp++;
        }
        single();
    }

//kernel4
    with hls(device) {
        write(ptr,0,read_channel_i32(&mut ch));
    }

}
