static mut ch0 : channel_i32;
static mut ch1 : channel_i32;

// At the moment P2P and M2M for several devices on the same platform is not supported.
// The only solution is copying data through host which is not that efficient.
fn @read(buf: &mut [i32], i: i32) -> i32 { bitcast[&[1][i32]](buf)(i)}
fn @write(buf: &mut [i32], i: i32, v: i32) -> () { bitcast[&mut[1][i32]](buf)(i) = v }

fn main() -> () {
    let device_0 = 0;
    let device_1 = 1;
    let ptr_0 = alloc_hls(device_0, sizeof[i32]() * 4i64).data as &mut [i32];
    let ptr_1 = alloc_hls(device_1, sizeof[i32]() * 4i64).data as &mut [i32];

    with hls(device_0) {
        // read from global memory and write to ch0
        write_channel_i32(&mut ch0, read(ptr_0,0));
    }

    with hls(device_0) {
        // read from ch0 and write to ch1
        write_channel_i32(&mut ch1, read_channel_i32(&mut ch0));
    }

    with hls(device_0) {
        // read from ch1 and write to global memory
        write(ptr_0, 0, read_channel_i32(&mut ch1));
    }

    // needs P2P or M2M
    with hls(device_1) {
        let temp = read(ptr_0, 0);
        write(ptr_1, 0, temp);
    }
}
