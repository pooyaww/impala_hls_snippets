#[import(cc = "thorin", interface = "stream")] fn cgra(_dev: i32, _runtime_ratio: f32, _location: (i32,i32), _vector_size_: i32, _body: fn() -> ()) -> ();

fn @range(body: fn (i32) -> i32) {
    fn loop(beg: i32, end: i32) -> () {
        if beg < end {
            @body(beg);
            loop(beg + 1, end)
        }
    }
    loop
}


struct CGRA_CONFIG {
    device: i32 = 0,
    runtime_ratio: f32 = 1,
    location: (i32, i32) = (-10, -10),
    vector_size: i32 = 4
}

#[export]
fn main()-> () {
    let mut k = 1;
    let config_k = CGRA_CONFIG{device = 0, runtime_ratio = 1, location = (1,1)};
    cgra(config_k.device, config_k.runtime_ratio, config_k.location, config_k.vector_size, || {
        for i in range(20,30) {
            k++
        }
    });
}
