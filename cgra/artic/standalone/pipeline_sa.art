#[import(cc = "thorin")] fn hls(_dev: i32, _body: fn() -> ()) -> ();
#[import(cc = "thorin")] fn cgra(dev: i32, body: fn() -> ()) -> ();
#[import(cc = "thorin", name = "pipeline")] fn thorin_pipeline(_initiation_interval: i32, _lower: i32, _upper: i32, _body: fn(i32) -> ())     -> ();

fn @pipeline(body: fn (i32) -> ()) = @|initiation_interval: i32, lower: i32, upper: i32| thorin_pipeline(initiation_interval, lower, upper    , body);
#[import(cc = "C", name = "anydsl_alloc")] fn runtime_alloc(_device: i32, _size: i64) -> &mut [i8];
#[import(cc = "builtin")] fn bitcast[T, U](_src: U) -> T;
#[import(cc = "builtin")] fn sizeof[_]() -> i64;


struct Buffer {
    data : &mut [i8],
    size : i64,
    device : i32
}

fn @alloc(device: i32, size: i64) = Buffer {
    data = runtime_alloc(device, size),
    size = size,
    device = device
};


fn @runtime_device(platform: i32, device: i32) -> i32 { platform | (device << 4) }
fn @read(buf: &mut [i32], i: i32) -> i32 { bitcast[&addrspace(1)[i32]](buf)(i)}
fn @write(buf: &mut [i32], i: i32, v: i32) -> () { bitcast[&mut addrspace(1)[i32]](buf)(i) = v }

#[export]
fn main()-> () {
    let device = 0;
    let ptr = alloc(runtime_device(2, device), sizeof[i32]() * 4:i64).data as &mut [i32];

    hls(0, || {
        //write_channel_i32(&mut ch, read(ptr, 0));
        read(ptr, 0);

    });


    cgra(device, || {
    //    read(ptr, 0);
        let mut k = 1;
        let II = 3;
        for i in pipeline(II,20,30) {
            //body
            k += i;
        }
    });
}


