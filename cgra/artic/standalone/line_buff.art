// using channels to switch between FPGA and CGRA

#[import(cc = "thorin", interface = "window", size = 1024)] fn cgra(_dev: i32, _runtime_ratio: f32, _location: (i32,i32), _vector_size_: i32, _body: fn() -> ()) -> ();
#[import(cc = "thorin")] fn hls(dev: i32, body: fn() -> ()) -> ();
#[import(cc = "thorin")] fn reserve_shared[T](_size: i32) -> &mut addrspace(3)[T];
#[import(cc = "device", name = "read_channel")] fn read_channel[T](&mut channel[T]) -> T;
#[import(cc = "device", name = "write_channel")] fn write_channel[T] (&mut channel[T], i32) -> ();
#[import(cc = "C", name = "anydsl_alloc")] fn runtime_alloc(_device: i32, _size: i64) -> &mut [i8];
#[import(cc = "builtin")] fn bitcast[T, U](_src: U) -> T;
#[import(cc = "builtin")] fn sizeof[_]() -> i64;
//#[import(cc = "device", name = "aie::load_v")] fn cgra_load_v[T](i32, &mut addrspace(1) T) -> T;
#[import(cc = "device", name = "aie::load_v")] fn cgra_load_v[T](u32, &T) -> T;
//#[import(cc = "device", name = "aie::load_v")] fn cgra_load_v[T](u32, &[T * 8]) -> T;
#[import(cc = "device", name = "aie::sliding_mul_xy_ops::mul")] fn cgra_sliding_mul_xy_ops_mul[T, U](u32, u32, i32, i32,  T, u32, U, u32) -> u64;
#[import(cc = "device", name = "window_readincr_v_channel")] fn cgra_window_readincr_v[T](u32, &mut channel[T]) -> T;
#[import(cc = "device", name = "aie::zeros")] fn cgra_zeros[T](u32) -> T;
//#[import(cc = "device", name = "srs")] fn cgra_to_vector[T](u64, u32) -> T;
#[import(cc = "device", name = "srs")] fn cgra_to_vector[T](u32, u64, u32) -> T;


// addrspace on type needs an explicit bitcast on argument
#[import(cc = "device", name = "aie::vector::insert")] fn cgra_insert[T](T, u32, T) -> ();
#[import(cc = "thorin", name = "pipeline")] fn thorin_pipeline(_initiation_interval: i32, _lower: i32, _upper: i32, _body: fn(i32) -> ()) -> ();
fn @pipeline(body: fn (i32) -> ()) = @|initiation_interval: i32, lower: i32, upper: i32| thorin_pipeline(initiation_interval, lower, upper, body);

fn @aie_pipeline(body: fn (i32) -> ()) = @|lower: i32, upper: i32| thorin_pipeline(0, lower, upper, body);


fn read_channel_v8[T](ch: &mut channel[T]) -> T {
    cgra_window_readincr_v[T](8, ch)
}

fn sliding_mul_i32(lane_size: u32, fir_taps: u32, coeff:i32, data:i32, data_start:u32) -> u64 {
    // 32b x 32b
    // ret acc80 (u64)
    let coeff_step = 1;
    let data_step_xy = 1;
    let coeff_start = 1:u32;

    cgra_sliding_mul_xy_ops_mul[i32, i32](lane_size, fir_taps, coeff_step, data_step_xy, coeff, coeff_start, data, data_start)
}


fn sliding_mul_8x8_i32(coeff:i32, data:i32, data_start:u32) = sliding_mul_i32(8, 8, coeff:i32, data:i32, data_start:u32);

fn @unroll_step(body: fn(i32) -> ()) {
    fn @(?beg & ?end & ?step) loop(beg: i32, end: i32, step: i32) -> () {
        if beg < end {
            @body(beg);
            loop(beg + step, end, step)
        }
    }
    loop
}

fn @range_(body: fn(i32) -> ()) = @|lower: i32, upper: i32| unroll_step(body)($lower, $upper, 1);


fn @range(body: fn (i32) -> ()) {
    fn loop(a: i32, b: i32) -> () {
        if a < b {
            body(a);
            loop(a + 1, b)
        }
    }
    loop
}


static static_mask = [0, 1, 2, 3, 4, 5, 6, 7];


struct channel_i32 {
    data: i32
}


struct channel[T] {
    data: T
}

struct Buffer {
    data : &mut [i8],
    size : i64,
    device : i32
}

fn @alloc(device: i32, size: i64) = Buffer {
    data = runtime_alloc(device, size),
    size = size,
    device = device
};

fn @runtime_device(platform: i32, device: i32) -> i32 { platform | (device << 4) }
//fn @read(buf: &mut [i32], i: i32) -> i32 { bitcast[&addrspace(1)[i32]](buf)(i)}
//fn @read(buf: MEM, i: i32) -> i32 { bitcast[&addrspace(1)[i32]](buf)(i)}
fn @read[T](buf: MEM, i: i32) -> T { bitcast[&addrspace(1)[T]](buf)(i)}
fn @write(buf: &mut [i32], i: i32, v: i32) -> () { bitcast[&mut addrspace(1)[i32]](buf)(i) = v }

//static mut ch1 : channel_i32;
//static mut ch2 : channel_i32;


static mut ch1 : channel[i32];
static mut ch2 : channel[i32];

//static mut mmul1 : mmul[i32];


struct CGRA_CONFIG {
    device: i32 = 0,
    runtime_ratio: f32 = 1,
    location: (i32, i32) = (-10, -10),
    vector_size: i32 = 16
}



struct MEM {
    mem: &mut[i32]
}

#[export]
fn main() -> () {
    let device = 0;
    let ptr_in = alloc(runtime_device(2, device), sizeof[i32]() * 4:i64).data as &mut [i32];
    let ptr_out = alloc(runtime_device(2, device), sizeof[i32]() * 4:i64).data as &mut [i32];

    let aa = MEM{mem = alloc(runtime_device(2, device), sizeof[i32]() * 4:i64).data as &mut [i32]};

    hls(device, || {
        //write_channel(&mut ch1, read(ptr_in, 0));
        write_channel[i32](&mut ch1, read[i32](aa, 0));
    });

    //TODO: the way hls channels get vectorized is differetn from cgra APIs. We need to make them compatible. probably similar to host-hls

    let config_k1 = CGRA_CONFIG{device = 0, runtime_ratio = 0.5, location = (-1, -1)};
    cgra(config_k1.device, config_k1.runtime_ratio, config_k1.location, config_k1.vector_size, || {
        let shared_mask = reserve_shared[i32](8);
        let lane_size = config_k1.vector_size as u32;
        let data = cgra_zeros[i32](lane_size);
        let coeff = cgra_load_v[i32](8, &static_mask(0));
        let mut acc : u64;

    });

    hls(device,|| {
        write(ptr_out, 0, read_channel(&mut ch2));
    });

}
