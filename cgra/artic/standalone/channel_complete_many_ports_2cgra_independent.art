// using channels to switch between FPGA and CGRA

#[import(cc = "thorin", interface = "stream")] fn cgra(_dev: i32, _runtime_ratio: f32, _location: (i32,i32), _vector_size_: i32, _body: fn() -> ()) -> ();
#[import(cc = "thorin")] fn hls(dev: i32, body: fn() -> ()) -> ();
#[import(cc = "device", name = "read_channel")] fn read_channel_i32(&mut channel_i32) -> i32;
#[import(cc = "device", name = "write_channel")] fn write_channel_i32 (&mut channel_i32, i32) -> ();
#[import(cc = "C", name = "anydsl_alloc")] fn runtime_alloc(_device: i32, _size: i64) -> &mut [i8];
#[import(cc = "builtin")] fn bitcast[T, U](_src: U) -> T;
#[import(cc = "builtin")] fn sizeof[_]() -> i64;


struct channel_i32 {
    data: i32
}

struct Buffer {
    data : &mut [i8],
    size : i64,
    device : i32
}

fn @alloc(device: i32, size: i64) = Buffer {
    data = runtime_alloc(device, size),
    size = size,
    device = device
};

fn @runtime_device(platform: i32, device: i32) -> i32 { platform | (device << 4) }
fn @read(buf: &mut [i32], i: i32) -> i32 { bitcast[&addrspace(1)[i32]](buf)(i)}
fn @write(buf: &mut [i32], i: i32, v: i32) -> () { bitcast[&mut addrspace(1)[i32]](buf)(i) = v }

static mut ch1_1 : channel_i32;
static mut ch2_1 : channel_i32;
static mut ch3_1 : channel_i32;


static mut ch1_2 : channel_i32;
static mut ch2_2 : channel_i32;
static mut ch3_2 : channel_i32;


static mut ch1_1o : channel_i32;
static mut ch2_1o : channel_i32;
static mut ch3_1o : channel_i32;


static mut ch1_2o : channel_i32;
static mut ch2_2o : channel_i32;
static mut ch3_2o : channel_i32;


struct CGRA_CONFIG {
    device: i32 = 0,
    runtime_ratio: f32 = 1,
    location: (i32, i32) = (-10, -10),
    vector_size: i32 = 4
}

#[export]
fn main() -> () {
    let device = 0;

    let ptr_in1_1 = alloc(runtime_device(2, device), sizeof[i32]() * 4:i64).data as &mut [i32];
    let ptr_in2_1 = alloc(runtime_device(2, device), sizeof[i32]() * 4:i64).data as &mut [i32];
    let ptr_in3_1 = alloc(runtime_device(2, device), sizeof[i32]() * 4:i64).data as &mut [i32];

    let ptr_in1_2 = alloc(runtime_device(2, device), sizeof[i32]() * 4:i64).data as &mut [i32];
    let ptr_in2_2 = alloc(runtime_device(2, device), sizeof[i32]() * 4:i64).data as &mut [i32];
    let ptr_in3_2 = alloc(runtime_device(2, device), sizeof[i32]() * 4:i64).data as &mut [i32];



    let ptr_out1_1 = alloc(runtime_device(2, device), sizeof[i32]() * 4:i64).data as &mut [i32];
    let ptr_out2_1 = alloc(runtime_device(2, device), sizeof[i32]() * 4:i64).data as &mut [i32];
    let ptr_out3_1 = alloc(runtime_device(2, device), sizeof[i32]() * 4:i64).data as &mut [i32];

    let ptr_out1_2 = alloc(runtime_device(2, device), sizeof[i32]() * 4:i64).data as &mut [i32];
    let ptr_out2_2 = alloc(runtime_device(2, device), sizeof[i32]() * 4:i64).data as &mut [i32];
    let ptr_out3_2 = alloc(runtime_device(2, device), sizeof[i32]() * 4:i64).data as &mut [i32];

    hls(device, || {
        write_channel_i32(&mut ch1_1, read(ptr_in1_1, 0));
        write_channel_i32(&mut ch2_1, read(ptr_in2_1, 0));
        write_channel_i32(&mut ch3_1, read(ptr_in3_1, 0));


        write_channel_i32(&mut ch1_2, read(ptr_in1_2, 1));
        write_channel_i32(&mut ch2_2, read(ptr_in2_2, 0));
        write_channel_i32(&mut ch3_2, read(ptr_in3_2, 0));
    });

    let config_k1 = CGRA_CONFIG{device = 0, runtime_ratio = 0.5, location = (-1, -1)};
    cgra(config_k1.device, config_k1.runtime_ratio, config_k1.location, config_k1.vector_size, || {
        let temp1 = read_channel_i32(&mut ch1_1);
        let temp2 = read_channel_i32(&mut ch2_1);
        let temp3 = read_channel_i32(&mut ch3_1);
        write_channel_i32(&mut ch1_1o, temp1);
        //write_channel_i32(&mut ch1_1o, 2);
        write_channel_i32(&mut ch2_1o, temp2);
        write_channel_i32(&mut ch3_1o, temp3);
    });


    let config_k2 = CGRA_CONFIG{device = 0, runtime_ratio = 0.5, location = (-1, -1)};
    cgra(config_k2.device, config_k2.runtime_ratio, config_k2.location, config_k2.vector_size, || {
        let temp1 = read_channel_i32(&mut ch1_2);
        let temp2 = read_channel_i32(&mut ch2_2);
        let temp3 = read_channel_i32(&mut ch3_2);
        write_channel_i32(&mut ch1_2o, temp1);
        write_channel_i32(&mut ch2_2o, temp2);
        write_channel_i32(&mut ch3_2o, temp3);
    });

    hls(device,|| {
        write(ptr_out1_1, 0, read_channel_i32(&mut ch1_1o));
        write(ptr_out2_1, 0, read_channel_i32(&mut ch2_1o));
        write(ptr_out3_1, 0, read_channel_i32(&mut ch3_1o));

        write(ptr_out1_2, 0, read_channel_i32(&mut ch1_2o));
        write(ptr_out2_2, 0, read_channel_i32(&mut ch2_2o));
        write(ptr_out3_2, 0, read_channel_i32(&mut ch3_2o));
    });


}
