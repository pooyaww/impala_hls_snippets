// using channels to switch between FPGA and CGRA

#[import(cc = "thorin")] fn cgra(dev: i32, body: fn() -> ()) -> ();
#[import(cc = "thorin")] fn hls(dev: i32, body: fn() -> ()) -> ();
#[import(cc = "thorin")] fn opencl(dev: i32, grid: (i32, i32, i32), block: (i32, i32, i32), body: fn() -> ()) -> ();
#[import(cc = "device", name = "read_channel")] fn read_channel_i32(&mut channel_i32) -> i32;
#[import(cc = "device", name = "write_channel")] fn write_channel_i32 (&mut channel_i32, i32) -> ();
#[import(cc = "C", name = "anydsl_alloc")] fn runtime_alloc(_device: i32, _size: i64) -> &mut [i8];
#[import(cc = "builtin")] fn bitcast[T, U](_src: U) -> T;
#[import(cc = "builtin")] fn sizeof[_]() -> i64;


struct channel_i32 {
    data: i32
}

struct Buffer {
    data : &mut [i8],
    size : i64,
    device : i32
}

fn @alloc(device: i32, size: i64) = Buffer {
    data = runtime_alloc(device, size),
    size = size,
    device = device
};

fn @runtime_device(platform: i32, device: i32) -> i32 { platform | (device << 4) }
fn @read(buf: &mut [i32], i: i32) -> i32 { bitcast[&addrspace(1)[i32]](buf)(i)}
fn @write(buf: &mut [i32], i: i32, v: i32) -> () { bitcast[&mut addrspace(1)[i32]](buf)(i) = v }

static mut ch_df : channel_i32;
static mut ch_cl_df : channel_i32;
static mut ch_mixed_1 : channel_i32;
static mut ch_mixed_2 : channel_i32;

#[export]
fn main() -> () {

    let device = 0;

// ************ HLS_FPGA Dataflow kernels************
    let ptr_in_df = alloc(runtime_device(2, device), sizeof[i32]() * 4:i64).data as &mut [i32];
    let ptr_out_df = alloc(runtime_device(2, device), sizeof[i32]() * 4:i64).data as &mut [i32];

    hls(device, || {
        write_channel_i32(&mut ch_df, read(ptr_in_df, 0));
    });

    hls(device, || {
        write(ptr_out_df, 0, read_channel_i32(&mut ch_df));
    });

 //************ mixed kernels for CGRA*********
    let ptr_in_mixed = alloc(runtime_device(2, device), sizeof[i32]() * 4:i64).data as &mut [i32];
    let ptr_out_mixed = alloc(runtime_device(2, device), sizeof[i32]() * 4:i64).data as &mut [i32];

    hls(device, || {
        write_channel_i32(&mut ch_mixed_1, read(ptr_in_mixed, 0));
    });

    cgra(device,|| {
        let temp = read_channel_i32(&mut ch_mixed_1);
        write_channel_i32(&mut ch_mixed_2, temp);
    });

    hls(device,|| {
        write(ptr_out_mixed, 0, read_channel_i32(&mut ch_mixed_2));
    });

 // **********Singel HLS_FPGA kernel***************************
    let ptr_out_single = alloc(runtime_device(2, device), sizeof[i32]() * 4:i64).data as &mut [i32];

    hls(device, || {
        write(ptr_out_single, 2, 2);
    });

// ************ OpeCL_FPGA Dataflow kernels************
    let ptr_in_cl_df = alloc(runtime_device(2, device), sizeof[i32]() * 4:i64).data as &mut [i32];
    let ptr_out_cl_df = alloc(runtime_device(2, device), sizeof[i32]() * 4:i64).data as &mut [i32];
    let grid  = (1,1,1);
    let block = (1,1,1);

    opencl(device, grid, block, || {
        write_channel_i32(&mut ch_cl_df, read(ptr_in_cl_df, 0));
    });

    opencl(device, grid, block, || {
        write(ptr_out_cl_df, 0, read_channel_i32(&mut ch_cl_df));
    });



}
