#[import(cc = "thorin")] fn cgra(_dev: i32, _runtime_ratio: f32, _location: (i32,i32), _body: fn() -> ()) -> ();
#[import(cc = "thorin")] fn hls(dev: i32, body: fn() -> ()) -> ();
#[import(cc = "device", name = "read_channel")] fn read_channel_i32(&mut channel_i32) -> i32;
#[import(cc = "device", name = "write_channel")] fn write_channel_i32 (&mut channel_i32, i32) -> ();
#[import(cc = "C", name = "anydsl_alloc")] fn runtime_alloc(_device: i32, _size: i64) -> &mut [i8];
#[import(cc = "builtin")] fn bitcast[T, U](_src: U) -> T;
#[import(cc = "builtin")] fn sizeof[_]() -> i64;


struct channel_i32 {
    data: i32
}

struct Buffer {
    data : &mut [i8],
    size : i64,
    device : i32
}

fn @alloc(device: i32, size: i64) = Buffer {
    data = runtime_alloc(device, size),
    size = size,
    device = device
};

fn @runtime_device(platform: i32, device: i32) -> i32 { platform | (device << 4) }
fn @read(buf: &mut [i32], i: i32) -> i32 { bitcast[&addrspace(1)[i32]](buf)(i)}
fn @write(buf: &mut [i32], i: i32, v: i32) -> () { bitcast[&mut addrspace(1)[i32]](buf)(i) = v }

static mut ch : channel_i32;

struct CGRA_CONFIG {
    device: i32 = 0,
    runtime_ratio: f32 = 1,
    location: (i32, i32) = (-10, -10)
}

#[export]
fn main() -> () {
    let device = 0;
    let ptr = alloc(runtime_device(2, device), sizeof[i32]() * 4:i64).data as &mut [i32];

    hls(device, || {
        write_channel_i32(&mut ch, read(ptr, 0));
    });

    let config_k = CGRA_CONFIG{device = 0, runtime_ratio = 1, location = (1,1)};

    cgra(config_k.device, config_k.runtime_ratio, config_k.location,|| {
        write(ptr, 0, read_channel_i32(&mut ch));
    });
}
