static mut ch : channel_i32;

fn @read(buf: &mut [i32], i: i32) -> i32 { bitcast[&[1][i32]](buf)(i)}
fn @write(buf: &mut [i32], i: i32, v: i32) -> () { bitcast[&mut[1][i32]](buf)(i) = v }


fn main() -> () {

    let grid   = (1, 1, 1);
    let block  = (2, 2, 2);
    let device = 0;

    let ptr = alloc_opencl(0, sizeof[i32]() * 4i64).data as &mut [i32];
    // read from global memory write to channel
    with opencl(device, grid, block) {
        write_channel_i32(&mut ch, read(ptr,0));
    }
    // reaad from channel, write to global memory
    with opencl(device + 2, grid, block) {
        write(ptr,0,read_channel_i32(&mut ch));
    }

}
