static mut ch2 : channel_u8;  //used
static mut ch3 : channel_f32;
static mut ch1 : channel_i32; //used

fn @read_i32(buf: &mut [i32], i: i32) -> i32 { bitcast[&[1][i32]](buf)(i)}
fn @write_i32(buf: &mut [i32], i: i32, v: i32) -> () { bitcast[&mut[1][i32]](buf)(i) = v }

fn @read_u8(buf: &mut [u8], i: i32) -> u8 { bitcast[&[1][u8]](buf)(i)}
fn @write_u8(buf: &mut [u8], i: i32, v: u8) -> () { bitcast[&mut[1][u8]](buf)(i) = v }

fn main() -> () {

    let grid   = (1, 1, 1);
    let block  = (1, 1, 1);
    let device = 0;

    let ptr1 = alloc_cpu(sizeof[i32]() * 4 as i64).data as &mut [i32]; // as integer stream generator
    let ptr2 = alloc_cpu(sizeof[u8]() * 4 as i64).data as &mut [u8]; // as char stream generator

    with opencl(device, grid, block) {
        write_channel_i32(&mut ch1, read_i32(ptr1,0));
        write_channel_u8(&mut ch2, read_u8(ptr2,0));
    }

    with opencl(device, grid, block) {
        write_i32(ptr1, 0, read_channel_i32(&mut ch1));
        write_u8(ptr2, 0, read_channel_u8(&mut ch2));
    }
}
