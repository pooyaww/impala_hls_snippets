
// cpu->FPGA_opecnl->FPGA_HLS->FPGA->opencl->FPGA_HLS->cpu
// At the moment two independant hls modules, i.e. without channel connections, has an issue
static mut ch_cl : channel_i32;
static mut ch_hls : channel_i32;

fn @read(buf: &mut [i32], i: i32) -> i32 { bitcast[&[1][i32]](buf)(i)}
fn @write(buf: &mut [i32], i: i32, v: i32) -> () { bitcast[&mut[1][i32]](buf)(i) = v }


fn main() -> () {

    let grid   = (1, 1, 1);
    let block  = (1, 1, 1);
    let device = 0;

    let ptr_cl = alloc_opencl(0, sizeof[i32]() * 4 as i64).data as &mut [i32];
    let ptr_hls = alloc_cpu(sizeof[i32]() * 4 as i64).data as &mut [i32];

    // read from global memory write to channel
    with opencl(device, grid, block) {
        write_channel_i32(&mut ch_cl, read(ptr_cl,0));
    }

    with cuda(device, grid, block) {
        for i in range(20,30) {
            let mut k = 1;
            for i in range(20,30) {
                //body
                k += i;
            }
        }
    }

    with hls(device) {
        let mut k = 1;
        // II = 0 lets the synthesis tool decide for the best II considering the constraints applied on the clock period.
        let II = 0;
        for i in pipeline(II,20,30) {
            //body
            k += i;
        }
        write_channel_i32(&mut ch_hls, ptr_hls(0));
    }

    // read from channel, write to global memory
    with opencl(device, grid, block) {
        write(ptr_cl,0,read_channel_i32(&mut ch_cl));
    }

    with hls(device) {
        ptr_hls(0) = read_channel_i32(&mut ch_hls);
        let mut x = 1;
        // II = 0 lets the synthesis tool decide for the best II considering the constraints applied on the clock period.
        let II = 2;
        for i in pipeline(II,1,20) {
            //body
            x += i;
        }
    }

    for i in range(20,30) {
        let mut k = 1;
        for i in range(20,30) {
            //body
            k += i;
        }
    }
}
