static mut ch0 : channel_i32;
static mut ch1 : channel_i32;

fn @read(buf: &mut [i32], i: i32) -> i32 { bitcast[&[1][i32]](buf)(i)}
fn @write(buf: &mut [i32], i: i32, v: i32) -> () { bitcast[&mut[1][i32]](buf)(i) = v }


fn main() -> () {

    let grid   = (1, 1, 1);
    let block  = (1, 1, 1);
    let device = 0;

    let ptr = alloc_opencl(0, sizeof[i32]() * 4).data as &mut [i32];
    // read from global memory write to channel
    with opencl(device, grid, block) {
        write_channel_i32(&mut ch0, read(ptr,0));
    }
    //processing kernel should be autorun without host interface
    with opencl(device, grid, block) {

        let data = read_channel_i32 (&mut ch0);
        let data_processed = data + 1;
        write_channel_i32(&mut ch1, data_processed);

    }

    // read from channel, write to global memory
    with opencl(device, grid, block) {
        write(ptr,0,read_channel_i32(&mut ch1));
    }

}
