fn @read(buf: &mut [i32], i: i32) -> i32 { bitcast[&[1][i32]](buf)(i)}
fn @write(buf: &mut [i32], i: i32, v: i32) -> () { bitcast[&mut[1][i32]](buf)(i) = v }

fn main() -> () {

    let grid   = (1, 1, 1);
    let block  = (1, 1, 1);
    let device = 0;

    let ptr_in  = alloc_opencl(0, sizeof[i32]() * 4).data as &mut [i32];
    let ptr_out = alloc_opencl(0, sizeof[i32]() * 4).data as &mut [i32];

    with opencl(device, grid, block) {
        write(ptr_out, 0, read(ptr_in, 0));
    }
}
